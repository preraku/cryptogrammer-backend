commands:
  01_install_certbot:
    command: |
      LOG_FILE="/var/log/install_certbot.log"
      {
        echo "Starting Certbot installation..." >> $LOG_FILE
        echo "Date: $(date)" >> $LOG_FILE

        # Install Certbot
        sudo yum install -y certbot python3-certbot-nginx

        # Obtain SSL certificate
        sudo certbot certonly --nginx -d app.prerak.net --non-interactive --agree-tos -m preraku@gmail.com

        # Create directories if they do not exist
        sudo mkdir -p /etc/pki/tls/certs/app.prerak.net
        sudo mkdir -p /etc/pki/tls/private/app.prerak.net

        # Create symbolic links to the certificates
        sudo ln -sf /etc/letsencrypt/live/app.prerak.net/fullchain.pem /etc/pki/tls/certs/app.prerak.net/fullchain.pem
        sudo ln -sf /etc/letsencrypt/live/app.prerak.net/privkey.pem /etc/pki/tls/private/app.prerak.net/privkey.pem

        sudo chown nginx:nginx /etc/pki/tls/certs/app.prerak.net/fullchain.pem
        sudo chown nginx:nginx /etc/pki/tls/private/app.prerak.net/privkey.pem
        sudo chmod 644 /etc/pki/tls/certs/app.prerak.net/fullchain.pem
        sudo chmod 600 /etc/pki/tls/private/app.prerak.net/privkey.pem

        # Verify that the symbolic links were created successfully
        if [ ! -f /etc/pki/tls/certs/app.prerak.net/fullchain.pem ]; then
          echo "Error: /etc/pki/tls/certs/app.prerak.net/fullchain.pem does not exist." >> $LOG_FILE
          exit 1
        fi
        if [ ! -f /etc/pki/tls/private/app.prerak.net/privkey.pem ]; then
          echo "Error: /etc/pki/tls/private/app.prerak.net/privkey.pem does not exist." >> $LOG_FILE
          exit 1
        fi

        # Reload Nginx to apply the new certificates
        # sudo service nginx reload

        echo "Certbot installation completed." >> $LOG_FILE
      } &>> $LOG_FILE

# files:
#   "/etc/nginx/conf.d/ssl.conf":
#     mode: "000644"
#     owner: root
#     group: root
#     content: |
#       server {
#           listen 443 ssl;
#           server_name app.prerak.net;

#           ssl_certificate /etc/pki/tls/certs/app.prerak.net/fullchain.pem;
#           ssl_certificate_key /etc/pki/tls/private/app.prerak.net/privkey.pem;

#           location / {
#               proxy_pass http://localhost:8080;
#               proxy_set_header Host $host;
#               proxy_set_header X-Real-IP $remote_addr;
#               proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#               proxy_set_header X-Forwarded-Proto $scheme;
#           }

#           location /socket.io/ {
#             proxy_pass http://localhost:8080/socket.io/;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection "upgrade";
#             proxy_set_header Host $host;
#             proxy_cache_bypass $http_upgrade;
#         }
#       }

files:
  /etc/nginx/conf.d/https.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      # HTTPS server

      server {
          listen       443;
          server_name  app.prerak.net;

          ssl                  on;
          ssl_certificate      /etc/pki/tls/certs/app.prerak.net/fullchain.pem;
          ssl_certificate_key  /etc/pki/tls/private/app.prerak.net/privkey.pem;

          ssl_session_timeout  5m;

          ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
          ssl_prefer_server_ciphers   on;

          # For enhanced health reporting support, uncomment this block:

          if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
             set $year $1;
             set $month $2;
             set $day $3;
             set $hour $4;
          }
          access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour healthd;
          access_log  /var/log/nginx/access.log  main;

          location / {
              proxy_pass  http://localhost:8080;
              proxy_set_header   Connection "";
              proxy_http_version 1.1;
              proxy_set_header        Host            $host;
              proxy_set_header        X-Real-IP       $remote_addr;
              proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header        X-Forwarded-Proto https;
          }
      }

container_commands:
  01_reload_nginx:
    command: "sudo service nginx reload"
